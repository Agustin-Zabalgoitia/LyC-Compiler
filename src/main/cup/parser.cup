package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.utils.TextFormatter;

class Parser;

// Terminals
/* Identificador */
terminal ID;

/* Palabras Reservadas */
terminal ELSE;
terminal IF;
terminal DECVAR;
terminal WHILE;
terminal ENTRADA;
terminal SALIDA;

/* Operadores */
terminal ASIG;
terminal OP_SUMA;
terminal OP_RESTA;
terminal OP_MULT;
terminal OP_DIV;

/* Operadores Lógicos */
terminal OPA_AND;
terminal OPA_OR;
terminal OPA_NOT;
terminal OPA_MAY;
terminal OPA_MEN;
terminal OPA_IGUAL;
terminal OPA_MAIG;
terminal OPA_MEIG;

/* Constantes */
terminal CTE_E;
terminal CTE_F;
terminal CTE_S;

/* Tipos de Dato */
terminal INT;
terminal FLOAT;
terminal STRING;
terminal BOOLEAN;

/* Símbolos */
terminal LLAV_ABRE;
terminal LLAV_CIER;
terminal PAR_ABRE;
terminal PAR_CIER;
terminal DOS_PTOS;
terminal COMA;

// Non Terminals
// We use lowercase, or camelCase if necessary, when defining non terminals
non terminal sentence;
non terminal operation;
non terminal output;
non terminal input;
non terminal ifelse;
non terminal condition;
non terminal logExpr; //Logical Expression
non terminal logOp; //Logical Operator
non terminal expression;
non terminal term;
non terminal factor;
non terminal assign;
non terminal while;
non terminal decBlock; //Declaration Block
non terminal declaration;
non terminal dataType;
non terminal idList;
non terminal beginning;
non terminal function;
non terminal exprList; //Expression List

// Start Symbol Definition
start with beginning;

// Grammar rules!
beginning   ::= decBlock
            |   decBlock sentence
            |   sentence;

sentence    ::= operation sentence
            |   operation;

operation   ::= output
            |   input
            |   assign
            |   ifelse
            |   while
            |   function;

/* Output */
output      ::= SALIDA PAR_ABRE CTE_S:str PAR_CIER {: TextFormatter.formatAndPrintText("output", "SALIDA PAR_ABRE CTE_S:"+str+" PAR_CIER"); :}
            |   SALIDA PAR_ABRE ID:id PAR_CIER {: TextFormatter.formatAndPrintText("output", "SALIDA PAR_ABRE ID:"+id+" PAR_CIER"); :}
            ;

/* Input */
input       ::= ENTRADA PAR_ABRE ID:id PAR_CIER {: TextFormatter.formatAndPrintText("input","ENTRADA PAR_ABRE ID:"+id+" PAR_CIER"); :};

/* Assign */
assign      ::= ID:id ASIG expression {: TextFormatter.formatAndPrintText("assign","ID:"+id+" ASIG expression");:};

/* Ifelse */
ifelse      ::= IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER {:TextFormatter.formatAndPrintText("ifelse","IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER");:}
            |   IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER ELSE LLAV_ABRE sentence LLAV_CIER {:TextFormatter.formatAndPrintText("ifelse","IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER ELSE LLAV_ABRE sentence LLAV_CIER");:};

condition   ::= logExpr
            |   OPA_NOT logExpr {:TextFormatter.formatAndPrintText("condition","OPA_NOT logExpr");:}
            |   logExpr OPA_AND logExpr {:TextFormatter.formatAndPrintText("condition","logExpr OPA_AND logExpr");:}
            |   logExpr OPA_OR logExpr {:TextFormatter.formatAndPrintText("condition","logExpr OPA_OR logExpr");:};

logExpr     ::= expression logOp expression
            |   expression;

logOp       ::= OPA_MAY {:TextFormatter.formatAndPrintText("logOp","OPA_MAY");:}
            |   OPA_MEN {:TextFormatter.formatAndPrintText("logOp","OPA_MEN");:}
            |   OPA_MAIG {:TextFormatter.formatAndPrintText("logOp","OPA_MAIG");:}
            |   OPA_MEIG {:TextFormatter.formatAndPrintText("logOp","OPA_MEIG");:}
            |   OPA_IGUAL {:TextFormatter.formatAndPrintText("logOp","OPA_IGUAL");:};

/* Expression */
expression  ::= expression OP_SUMA term {: TextFormatter.formatAndPrintText("expression","expression OP_SUMA term"); :}
            |   expression OP_RESTA term {: TextFormatter.formatAndPrintText("expression","expression OP_RESTA term"); :}
            |   term;

term        ::= term OP_MULT factor {: TextFormatter.formatAndPrintText("term","term OP_MULT factor"); :}
            |   term OP_DIV factor {: TextFormatter.formatAndPrintText("term","term OP_DIV factor"); :}
            |   factor;

factor      ::= ID:id {: TextFormatter.formatAndPrintText("factor","ID:"+id); :}
            |   CTE_E:num {: TextFormatter.formatAndPrintText("factor","CTE_E:"+num); :}
            |   OP_RESTA CTE_E:num {: TextFormatter.formatAndPrintText("factor","OP_RESTA CTE_E:"+num); :}
            |   CTE_F:fnum {: TextFormatter.formatAndPrintText("factor","CTE_F:"+fnum); :}
            |   OP_RESTA CTE_F:fnum {: TextFormatter.formatAndPrintText("factor","OP_RESTA CTE_F:"+fnum); :}
            |   CTE_S:str {: TextFormatter.formatAndPrintText("factor","CTE_S:"+str); :}
            |   function
            |   PAR_ABRE expression PAR_CIER;

/* While */
while       ::= WHILE PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER {: TextFormatter.formatAndPrintText("while", "WHILE PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER "); :};

/* Declaration */
decBlock    ::= DECVAR LLAV_ABRE declaration LLAV_CIER {: TextFormatter.formatAndPrintText("decBlock", "DECVAR LLAV_ABRE declaration LLAV_CIER"); :};

declaration ::= idList DOS_PTOS dataType declaration {: TextFormatter.formatAndPrintText("declaration","idList DOS_PTOS dataType declaration"); :}
            |   idList DOS_PTOS dataType {: TextFormatter.formatAndPrintText("declaration","idList DOS_PTOS dataType"); :};

dataType    ::= INT {: TextFormatter.formatAndPrintText("dataType", "INT"); :}
            |   FLOAT {: TextFormatter.formatAndPrintText("dataType","FLOAT"); :}
            |   STRING {: TextFormatter.formatAndPrintText("dataType","STRING"); :}
            |   BOOLEAN {: TextFormatter.formatAndPrintText("dataType","BOOLEAN"); :};

idList      ::= ID:id COMA idList {: TextFormatter.formatAndPrintText("idList", "ID:"+id+" COMA idList"); :} 
            |   ID:id {: TextFormatter.formatAndPrintText("idList", "ID:"+id); :};

/* Function */
function    ::= ID:id PAR_ABRE PAR_CIER {: TextFormatter.formatAndPrintText("function", "ID:"+id+" PAR_ABRE PAR_CIER"); :}
            |   ID:id PAR_ABRE exprList PAR_CIER {: TextFormatter.formatAndPrintText("function", "ID:"+id+" PAR_ABRE exprList PAR_CIER"); :};

exprList    ::= expression COMA exprList {: TextFormatter.formatAndPrintText("exprList", "expression COMA exprList"); :}
            |   expression;