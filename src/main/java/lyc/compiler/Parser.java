
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package lyc.compiler;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\004\006\000\002\005\003\000\002\005\003\000\002" +
    "\006\006\000\002\016\005\000\002\007\011\000\002\007" +
    "\015\000\002\010\003\000\002\010\004\000\002\010\005" +
    "\000\002\010\005\000\002\011\005\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\005\000\002\017\011\000\002" +
    "\020\006\000\002\021\006\000\002\021\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\023\005" +
    "\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\016\004\016\006\015\007\017\011\004\012" +
    "\007\013\013\001\002\000\004\041\125\001\002\000\022" +
    "\002\ufffa\004\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013" +
    "\ufffa\040\ufffa\001\002\000\022\002\ufffe\004\ufffe\006\ufffe" +
    "\007\ufffe\011\ufffe\012\ufffe\013\ufffe\040\ufffe\001\002\000" +
    "\004\041\122\001\002\000\022\002\uffff\004\016\006\015" +
    "\007\017\011\004\012\007\013\013\040\uffff\001\002\000" +
    "\022\002\ufffb\004\ufffb\006\ufffb\007\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\040\ufffb\001\002\000\022\002\ufff9\004\ufff9\006" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\040\ufff9\001\002" +
    "\000\004\041\114\001\002\000\004\002\113\001\002\000" +
    "\004\041\062\001\002\000\004\014\037\001\002\000\004" +
    "\037\022\001\002\000\022\002\ufffd\004\ufffd\006\ufffd\007" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\040\ufffd\001\002\000\022" +
    "\002\ufffc\004\ufffc\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\040\ufffc\001\002\000\004\004\023\001\002\000\006" +
    "\043\uffd4\044\035\001\002\000\004\043\027\001\002\000" +
    "\004\040\026\001\002\000\022\002\uffdb\004\uffdb\006\uffdb" +
    "\007\uffdb\011\uffdb\012\uffdb\013\uffdb\040\uffdb\001\002\000" +
    "\010\034\033\035\032\036\030\001\002\000\006\004\uffd6" +
    "\040\uffd6\001\002\000\006\004\023\040\uffd9\001\002\000" +
    "\006\004\uffd7\040\uffd7\001\002\000\006\004\uffd8\040\uffd8" +
    "\001\002\000\004\040\uffda\001\002\000\004\004\023\001" +
    "\002\000\004\043\uffd5\001\002\000\014\004\040\031\046" +
    "\032\045\033\041\041\042\001\002\000\052\002\uffe1\004" +
    "\uffe1\006\uffe1\007\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\040\uffe1\042\uffe1\001\002" +
    "\000\052\002\uffde\004\uffde\006\uffde\007\uffde\011\uffde\012" +
    "\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\040" +
    "\uffde\042\uffde\001\002\000\014\004\040\031\046\032\045" +
    "\033\041\041\042\001\002\000\052\002\uffe5\004\uffe5\006" +
    "\uffe5\007\uffe5\011\uffe5\012\uffe5\013\uffe5\015\uffe5\016\uffe5" +
    "\017\053\020\054\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\040\uffe5\042\uffe5\001\002\000\052" +
    "\002\uffe2\004\uffe2\006\uffe2\007\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\040\uffe2\042" +
    "\uffe2\001\002\000\052\002\uffdf\004\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\040\uffdf\042\uffdf\001\002\000\052\002\uffe0\004" +
    "\uffe0\006\uffe0\007\uffe0\011\uffe0\012\uffe0\013\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\040\uffe0\042\uffe0\001\002" +
    "\000\026\002\ufff4\004\ufff4\006\ufff4\007\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\015\050\016\051\040\ufff4\001\002\000\014" +
    "\004\040\031\046\032\045\033\041\041\042\001\002\000" +
    "\014\004\040\031\046\032\045\033\041\041\042\001\002" +
    "\000\052\002\uffe6\004\uffe6\006\uffe6\007\uffe6\011\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\053\020\054\021\uffe6" +
    "\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\040" +
    "\uffe6\042\uffe6\001\002\000\014\004\040\031\046\032\045" +
    "\033\041\041\042\001\002\000\014\004\040\031\046\032" +
    "\045\033\041\041\042\001\002\000\052\002\uffe3\004\uffe3" +
    "\006\uffe3\007\uffe3\011\uffe3\012\uffe3\013\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\040\uffe3\042\uffe3\001\002\000" +
    "\052\002\uffe4\004\uffe4\006\uffe4\007\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\040\uffe4" +
    "\042\uffe4\001\002\000\052\002\uffe7\004\uffe7\006\uffe7\007" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\015\uffe7\016\uffe7\017\053" +
    "\020\054\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\040\uffe7\042\uffe7\001\002\000\010\015\050" +
    "\016\051\042\061\001\002\000\052\002\uffdd\004\uffdd\006" +
    "\uffdd\007\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\040\uffdd\042\uffdd\001\002\000\016" +
    "\004\040\023\065\031\046\032\045\033\041\041\042\001" +
    "\002\000\004\042\103\001\002\000\020\015\050\016\051" +
    "\024\077\025\074\026\101\027\075\030\100\001\002\000" +
    "\014\004\040\031\046\032\045\033\041\041\042\001\002" +
    "\000\010\021\070\022\067\042\ufff1\001\002\000\014\004" +
    "\040\031\046\032\045\033\041\041\042\001\002\000\014" +
    "\004\040\031\046\032\045\033\041\041\042\001\002\000" +
    "\004\042\uffef\001\002\000\004\042\uffee\001\002\000\004" +
    "\042\ufff0\001\002\000\014\004\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\041\uffeb\001\002\000\014\004\uffea\031\uffea\032\uffea" +
    "\033\uffea\041\uffea\001\002\000\014\004\040\031\046\032" +
    "\045\033\041\041\042\001\002\000\014\004\uffec\031\uffec" +
    "\032\uffec\033\uffec\041\uffec\001\002\000\014\004\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\041\uffe9\001\002\000\014\004\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\041\uffe8\001\002\000\014\015" +
    "\050\016\051\021\uffed\022\uffed\042\uffed\001\002\000\004" +
    "\037\104\001\002\000\016\004\016\006\015\007\017\011" +
    "\004\012\007\013\013\001\002\000\004\040\106\001\002" +
    "\000\024\002\ufff3\004\ufff3\005\107\006\ufff3\007\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\040\ufff3\001\002\000\004\037\110" +
    "\001\002\000\016\004\016\006\015\007\017\011\004\012" +
    "\007\013\013\001\002\000\004\040\112\001\002\000\022" +
    "\002\ufff2\004\ufff2\006\ufff2\007\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\040\ufff2\001\002\000\004\002\001\001\002\000\006" +
    "\004\115\033\116\001\002\000\004\042\ufff6\001\002\000" +
    "\004\042\ufff7\001\002\000\004\042\120\001\002\000\022" +
    "\002\ufff8\004\ufff8\006\ufff8\007\ufff8\011\ufff8\012\ufff8\013" +
    "\ufff8\040\ufff8\001\002\000\006\002\000\040\000\001\002" +
    "\000\004\004\123\001\002\000\004\042\124\001\002\000" +
    "\022\002\ufff5\004\ufff5\006\ufff5\007\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\040\ufff5\001\002\000\016\004\040\023\065\031" +
    "\046\032\045\033\041\041\042\001\002\000\004\042\127" +
    "\001\002\000\004\037\130\001\002\000\016\004\016\006" +
    "\015\007\017\011\004\012\007\013\013\001\002\000\004" +
    "\040\132\001\002\000\022\002\uffdc\004\uffdc\006\uffdc\007" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\040\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\130\000\022\002\013\003\007\004\005\006\017\007" +
    "\004\016\020\017\011\020\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\002\120\003\007\004\005\006\017\007\004\016\020" +
    "\017\011\020\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\024\023\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\030\001\001\000\002\001\001\000\006" +
    "\021\033\023\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\035\001\001\000\002" +
    "\001\001\000\010\013\046\014\042\015\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\057\014\042" +
    "\015\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\056\015\043\001\001\000\006\014\051\015\043\001" +
    "\001\000\002\001\001\000\004\015\055\001\001\000\004" +
    "\015\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\062\011\065\013\063\014\042\015\043\001\001\000" +
    "\002\001\001\000\004\012\075\001\001\000\012\011\072" +
    "\013\063\014\042\015\043\001\001\000\002\001\001\000" +
    "\012\011\071\013\063\014\042\015\043\001\001\000\012" +
    "\011\070\013\063\014\042\015\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\101\014\042\015\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\104\003" +
    "\007\004\005\006\017\007\004\016\020\017\011\020\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\110\003\007\004\005\006\017\007\004" +
    "\016\020\017\011\020\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\010\125\011\065\013" +
    "\063\014\042\015\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\130\003\007\004\005\006\017\007" +
    "\004\016\020\017\011\020\010\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentence ::= operation sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentence ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operation ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operation ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operation ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation ::= decBlock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation ::= ifelse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operation ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // output ::= SALIDA PAR_ABRE outVal PAR_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // outVal ::= CTE_S 
            {
              Object RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(" " + out + " "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outVal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // outVal ::= ID 
            {
              Object RESULT =null;
		int outleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int outright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object out = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println(" " + out + " "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("outVal",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // input ::= ENTRADA PAR_ABRE ID PAR_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // assign ::= ID ASIG expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ifelse ::= IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelse",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ifelse ::= IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER ELSE LLAV_ABRE sentence LLAV_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelse",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // condition ::= logExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condition ::= OPA_NOT logExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= logExpr OPA_AND logExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condition ::= logExpr OPA_OR logExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // logExpr ::= expression logOp expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logExpr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // logOp ::= OPA_MAY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logOp ::= OPA_MEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logOp ::= OPA_MAIG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logOp ::= OPA_MEIG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logOp ::= OPA_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression OP_SUMA term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression OP_RESTA term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= term OP_MULT factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // term ::= term OP_DIV factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // factor ::= CTE_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // factor ::= CTE_F 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= CTE_S 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= PAR_ABRE expression PAR_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while ::= WHILE PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // decBlock ::= DECVAR LLAV_ABRE declaration LLAV_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decBlock",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaration ::= idList DOS_PTOS dataType declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaration ::= idList DOS_PTOS dataType 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dataType ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dataType ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dataType ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // idList ::= ID COMA idList 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // idList ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
