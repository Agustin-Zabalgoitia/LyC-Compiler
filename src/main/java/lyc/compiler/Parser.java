
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.utils.TextFormatter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\002\004\000\002\002\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\006\000\002\004\006\000\002\005\006\000\002\015" +
    "\005\000\002\006\011\000\002\006\015\000\002\007\003" +
    "\000\002\007\004\000\002\007\005\000\002\007\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\016" +
    "\011\000\002\017\006\000\002\020\006\000\002\020\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\005\000\002\022\003\000\002" +
    "\024\005\000\002\024\006\000\002\025\005\000\002\025" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\016\004\020\006\017\007\021\010\005\011" +
    "\010\012\015\001\002\000\020\002\ufff8\004\ufff8\006\ufff8" +
    "\010\ufff8\011\ufff8\012\ufff8\040\ufff8\001\002\000\004\041" +
    "\141\001\002\000\004\002\140\001\002\000\020\002\ufffb" +
    "\004\ufffb\006\ufffb\010\ufffb\011\ufffb\012\ufffb\040\ufffb\001" +
    "\002\000\004\041\135\001\002\000\020\002\ufffc\004\020" +
    "\006\017\010\005\011\010\012\015\040\ufffc\001\002\000" +
    "\020\002\ufff7\004\ufff7\006\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\040\ufff7\001\002\000\016\002\000\004\020\006\017\010" +
    "\005\011\010\012\015\001\002\000\020\002\ufff6\004\ufff6" +
    "\006\ufff6\010\ufff6\011\ufff6\012\ufff6\040\ufff6\001\002\000" +
    "\004\041\126\001\002\000\004\002\ufffe\001\002\000\004" +
    "\041\075\001\002\000\006\013\043\041\042\001\002\000" +
    "\004\037\024\001\002\000\020\002\ufffa\004\ufffa\006\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\040\ufffa\001\002\000\020\002" +
    "\ufff9\004\ufff9\006\ufff9\010\ufff9\011\ufff9\012\ufff9\040\ufff9" +
    "\001\002\000\004\004\025\001\002\000\006\043\uffcf\044" +
    "\040\001\002\000\004\043\031\001\002\000\004\040\030" +
    "\001\002\000\016\002\uffd7\004\uffd7\006\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\001\002\000\012\033\036\034\035\035\032" +
    "\036\034\001\002\000\006\004\uffd2\040\uffd2\001\002\000" +
    "\006\004\025\040\uffd5\001\002\000\006\004\uffd1\040\uffd1" +
    "\001\002\000\006\004\uffd3\040\uffd3\001\002\000\006\004" +
    "\uffd4\040\uffd4\001\002\000\004\040\uffd6\001\002\000\004" +
    "\004\025\001\002\000\004\043\uffd0\001\002\000\016\004" +
    "\053\030\045\031\044\032\051\041\050\042\070\001\002" +
    "\000\014\004\053\030\045\031\044\032\051\041\050\001" +
    "\002\000\052\002\uffdc\004\uffdc\006\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\040\uffdc" +
    "\042\uffdc\044\uffdc\001\002\000\052\002\uffdd\004\uffdd\006" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\040\uffdd\042\uffdd\044\uffdd\001\002\000\052" +
    "\002\uffe2\004\uffe2\006\uffe2\010\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\016\060\017\061\020\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\027\uffe2\040\uffe2\042\uffe2\044" +
    "\uffe2\001\002\000\052\002\uffda\004\uffda\006\uffda\010\uffda" +
    "\011\uffda\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\040\uffda\042\uffda\044\uffda\001\002\000\014\004\053\030" +
    "\045\031\044\032\051\041\050\001\002\000\052\002\uffdb" +
    "\004\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\040\uffdb\042\uffdb\044\uffdb\001" +
    "\002\000\024\002\ufff2\004\ufff2\006\ufff2\010\ufff2\011\ufff2" +
    "\012\ufff2\014\056\015\055\040\ufff2\001\002\000\054\002" +
    "\uffde\004\uffde\006\uffde\010\uffde\011\uffde\012\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\040\uffde\041\042\042\uffde" +
    "\044\uffde\001\002\000\052\002\uffdf\004\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\040\uffdf\042\uffdf\044\uffdf\001\002\000\014\004\053" +
    "\030\045\031\044\032\051\041\050\001\002\000\014\004" +
    "\053\030\045\031\044\032\051\041\050\001\002\000\052" +
    "\002\uffe4\004\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\014" +
    "\uffe4\015\uffe4\016\060\017\061\020\uffe4\021\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\040\uffe4\042\uffe4\044" +
    "\uffe4\001\002\000\014\004\053\030\045\031\044\032\051" +
    "\041\050\001\002\000\014\004\053\030\045\031\044\032" +
    "\051\041\050\001\002\000\052\002\uffe0\004\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\027\uffe0\040\uffe0\042\uffe0\044\uffe0\001\002\000\052\002" +
    "\uffe1\004\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\040\uffe1\042\uffe1\044\uffe1" +
    "\001\002\000\052\002\uffe3\004\uffe3\006\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\014\uffe3\015\uffe3\016\060\017\061\020\uffe3" +
    "\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\040" +
    "\uffe3\042\uffe3\044\uffe3\001\002\000\010\014\056\015\055" +
    "\042\066\001\002\000\052\002\uffd9\004\uffd9\006\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\040\uffd9\042\uffd9\044\uffd9\001\002\000\004\042\074" +
    "\001\002\000\052\002\uffce\004\uffce\006\uffce\010\uffce\011" +
    "\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\040" +
    "\uffce\042\uffce\044\uffce\001\002\000\012\014\056\015\055" +
    "\042\uffcb\044\072\001\002\000\014\004\053\030\045\031" +
    "\044\032\051\041\050\001\002\000\004\042\uffcc\001\002" +
    "\000\052\002\uffcd\004\uffcd\006\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\040\uffcd\042" +
    "\uffcd\044\uffcd\001\002\000\016\004\053\022\100\030\045" +
    "\031\044\032\051\041\050\001\002\000\004\042\116\001" +
    "\002\000\026\014\056\015\055\020\uffea\021\uffea\023\111" +
    "\024\110\025\114\026\107\027\113\042\uffea\001\002\000" +
    "\014\004\053\030\045\031\044\032\051\041\050\001\002" +
    "\000\010\020\103\021\102\042\uffef\001\002\000\014\004" +
    "\053\030\045\031\044\032\051\041\050\001\002\000\014" +
    "\004\053\030\045\031\044\032\051\041\050\001\002\000" +
    "\004\042\uffed\001\002\000\004\042\uffec\001\002\000\004" +
    "\042\uffee\001\002\000\014\004\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\041\uffe7\001\002\000\014\004\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\041\uffe8\001\002\000\014\004\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\041\uffe9\001\002\000\014\004\053\030\045" +
    "\031\044\032\051\041\050\001\002\000\014\004\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\041\uffe6\001\002\000\014\004\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\041\uffe5\001\002\000\014\014" +
    "\056\015\055\020\uffeb\021\uffeb\042\uffeb\001\002\000\004" +
    "\037\117\001\002\000\014\004\020\006\017\010\005\011" +
    "\010\012\015\001\002\000\004\040\121\001\002\000\022" +
    "\002\ufff1\004\ufff1\005\122\006\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\040\ufff1\001\002\000\004\037\123\001\002\000\014" +
    "\004\020\006\017\010\005\011\010\012\015\001\002\000" +
    "\004\040\125\001\002\000\020\002\ufff0\004\ufff0\006\ufff0" +
    "\010\ufff0\011\ufff0\012\ufff0\040\ufff0\001\002\000\006\004" +
    "\127\032\130\001\002\000\004\042\132\001\002\000\004" +
    "\042\131\001\002\000\020\002\ufff5\004\ufff5\006\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\040\ufff5\001\002\000\020\002\ufff4" +
    "\004\ufff4\006\ufff4\010\ufff4\011\ufff4\012\ufff4\040\ufff4\001" +
    "\002\000\004\002\uffff\001\002\000\006\002\ufffd\040\ufffd" +
    "\001\002\000\004\004\136\001\002\000\004\042\137\001" +
    "\002\000\020\002\ufff3\004\ufff3\006\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\040\ufff3\001\002\000\004\002\001\001\002\000" +
    "\016\004\053\022\100\030\045\031\044\032\051\041\050" +
    "\001\002\000\004\042\143\001\002\000\004\037\144\001" +
    "\002\000\014\004\020\006\017\010\005\011\010\012\015" +
    "\001\002\000\004\040\146\001\002\000\020\002\uffd8\004" +
    "\uffd8\006\uffd8\010\uffd8\011\uffd8\012\uffd8\040\uffd8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\026\002\015\003\010\004\006\005\021\006" +
    "\003\015\022\016\011\017\012\023\005\024\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\002\133\003\010" +
    "\004\006\005\021\006\003\015\022\016\011\024\013\001" +
    "\001\000\002\001\001\000\022\002\132\003\010\004\006" +
    "\005\021\006\003\015\022\016\011\024\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\026\022\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\032\001\001\000\002\001\001" +
    "\000\006\020\036\022\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\040\001\001\000\002\001\001\000\014\012\070\013" +
    "\045\014\053\024\046\025\066\001\001\000\012\012\051" +
    "\013\045\014\053\024\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\064\013\045\014\053\024\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\063\014\053\024\046\001\001\000\010\013" +
    "\056\014\053\024\046\001\001\000\002\001\001\000\006" +
    "\014\062\024\046\001\001\000\006\014\061\024\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\012\070\013\045" +
    "\014\053\024\046\025\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\075\010\100\012\076\013\045" +
    "\014\053\024\046\001\001\000\002\001\001\000\004\011" +
    "\111\001\001\000\014\010\105\012\076\013\045\014\053" +
    "\024\046\001\001\000\002\001\001\000\014\010\104\012" +
    "\076\013\045\014\053\024\046\001\001\000\014\010\103" +
    "\012\076\013\045\014\053\024\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\114\013" +
    "\045\014\053\024\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\117\003\010\004\006\005\021\006\003\015\022\016\011" +
    "\024\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\123\003\010\004\006\005\021" +
    "\006\003\015\022\016\011\024\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\007" +
    "\141\010\100\012\076\013\045\014\053\024\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\144\003" +
    "\010\004\006\005\021\006\003\015\022\016\011\024\013" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= beginning EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // beginning ::= decBlock 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beginning",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // beginning ::= decBlock sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beginning",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // beginning ::= sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("beginning",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= operation sentence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= operation 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation ::= output 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation ::= input 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // operation ::= assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // operation ::= ifelse 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operation ::= while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operation ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operation",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // output ::= SALIDA PAR_ABRE CTE_S PAR_CIER 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TextFormatter.formatAndPrintText("output", "SALIDA PAR_ABRE CTE_S:"+str+" PAR_CIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // output ::= SALIDA PAR_ABRE ID PAR_CIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TextFormatter.formatAndPrintText("output", "SALIDA PAR_ABRE ID:"+id+" PAR_CIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // input ::= ENTRADA PAR_ABRE ID PAR_CIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 TextFormatter.formatAndPrintText("input","ENTRADA PAR_ABRE ID:"+id+" PAR_CIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // assign ::= ID ASIG expression 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 TextFormatter.formatAndPrintText("assign","ID:"+id+" ASIG expression");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifelse ::= IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("ifelse","IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelse",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ifelse ::= IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER ELSE LLAV_ABRE sentence LLAV_CIER 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("ifelse","IF PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER ELSE LLAV_ABRE sentence LLAV_CIER");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifelse",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condition ::= logExpr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // condition ::= OPA_NOT logExpr 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("condition","OPA_NOT logExpr");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // condition ::= logExpr OPA_AND logExpr 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("condition","logExpr OPA_AND logExpr");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // condition ::= logExpr OPA_OR logExpr 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("condition","logExpr OPA_OR logExpr");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // logExpr ::= expression logOp expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logExpr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logExpr ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logExpr",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logOp ::= OPA_MAY 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("logOp","OPA_MAY");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logOp ::= OPA_MEN 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("logOp","OPA_MEN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logOp ::= OPA_MAIG 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("logOp","OPA_MAIG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // logOp ::= OPA_MEIG 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("logOp","OPA_MEIG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // logOp ::= OPA_IGUAL 
            {
              Object RESULT =null;
		TextFormatter.formatAndPrintText("logOp","OPA_IGUAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logOp",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression OP_SUMA term 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("expression","expression OP_SUMA term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression OP_RESTA term 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("expression","expression OP_RESTA term"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // term ::= term OP_MULT factor 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("term","term OP_MULT factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // term ::= term OP_DIV factor 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("term","term OP_DIV factor"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // term ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // factor ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TextFormatter.formatAndPrintText("factor","ID:"+id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // factor ::= CTE_E 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TextFormatter.formatAndPrintText("factor","CTE_E:"+num); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // factor ::= CTE_F 
            {
              Object RESULT =null;
		int fnumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fnumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fnum = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TextFormatter.formatAndPrintText("factor","CTE_F:"+fnum); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // factor ::= CTE_S 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TextFormatter.formatAndPrintText("factor","CTE_S:"+str); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // factor ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // factor ::= PAR_ABRE expression PAR_CIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // while ::= WHILE PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("while", "WHILE PAR_ABRE condition PAR_CIER LLAV_ABRE sentence LLAV_CIER "); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // decBlock ::= DECVAR LLAV_ABRE declaration LLAV_CIER 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("decBlock", "DECVAR LLAV_ABRE declaration LLAV_CIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decBlock",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaration ::= idList DOS_PTOS dataType declaration 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("declaration","idList DOS_PTOS dataType declaration"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaration ::= idList DOS_PTOS dataType 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("declaration","idList DOS_PTOS dataType"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dataType ::= INT 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("dataType", "INT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dataType ::= FLOAT 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("dataType","FLOAT"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // dataType ::= STRING 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("dataType","STRING"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // dataType ::= BOOLEAN 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("dataType","BOOLEAN"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dataType",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // idList ::= ID COMA idList 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 TextFormatter.formatAndPrintText("idList", "ID:"+id+" COMA idList"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // idList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 TextFormatter.formatAndPrintText("idList", "ID:"+id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function ::= ID PAR_ABRE PAR_CIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 TextFormatter.formatAndPrintText("function", "ID:"+id+" PAR_ABRE PAR_CIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // function ::= ID PAR_ABRE exprList PAR_CIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 TextFormatter.formatAndPrintText("function", "ID:"+id+" PAR_ABRE exprList PAR_CIER"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprList ::= expression COMA exprList 
            {
              Object RESULT =null;
		 TextFormatter.formatAndPrintText("exprList", "expression COMA exprList"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprList ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exprList",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
